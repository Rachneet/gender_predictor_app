{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","preventDefault","errors","text","push","isLoading","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","response","json","result","length","alert","handleCancelClick","key","indexOf","react_default","a","createElement","Container","className","Form","Row","Group","as","Col","Label","Control","hasError","type","placeholder","rows","onChange","Button","size","block","variant","disabled","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf430db8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n\n   constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      formData: {\n        text:\"\"\n      },\n      result: \"\",\n      errors: []\n    };\n  }\n\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n\n  hasError(key) {\n    return this.state.errors.indexOf(key) !== -1;\n  }\n\n  handlePredictClick = (event) => {\n     event.preventDefault();\n     var errors = []\n    const formData = this.state.formData;\n\n     // text\n    if (formData.text === \"\") {\n      errors.push(\"text\");\n    }\n    else {\n      this.setState({isLoading: true});\n      fetch('http://127.0.0.1:5000/prediction/',\n          {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(formData)\n          })\n          .then(response => response.json())\n          .then(response => {\n            this.setState({\n              result: response.result,\n              isLoading: false\n            });\n          });\n    }\n\n    this.setState({\n      errors: errors\n    });\n\n    if (errors.length > 0) {\n      return false;\n    } else {\n      alert(\"Everything good. Submit text!\");\n    }\n  }\n\n  handleCancelClick = (event) => {\n      const formData = this.state.formData;\n      formData.text = \"\"\n    this.setState({formData, result: \"\"});\n  }\n\n\n  render() {\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n\n    return (\n     <Container>\n        <div>\n          <h1 className=\"title\">Gender Predictor</h1>\n        </div>\n        <div>\n          <Form>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>Text</Form.Label>\n                <Form.Control\n                    className={\n                this.hasError(\"text\")\n                ? \"form-control is-invalid\"\n                : \"form-control\"\n            }\n\n                  type=\"text\"\n                  placeholder=\"Enter text\"\n                  name=\"text\"\n                  value={formData.text}\n                  as=\"textarea\"\n                  rows=\"4\"\n                  onChange={this.handleChange} />\n\n              </Form.Group>\n            </Form.Row>\n\n             <div\n            className={\n              this.hasError(\"text\") ? \"inline-errormsg\" : \"hidden\"\n            }\n          >\n            Please enter a text\n          </div>\n\n\n            <Row className={\"pred-button\"}>\n              <Col >\n                <Button\n                    size={\"sm\"}\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}>\n                  { isLoading ? 'Making prediction' : 'Predict' }\n                </Button>\n              </Col>\n\n              <Col >\n                <Button size={\"sm\"}\n                  block\n                  variant=\"danger\"\n                  disabled={isLoading}\n                  onClick={this.handleCancelClick}>\n                  Reset prediction\n                </Button>\n              </Col>\n            </Row>\n\n             {result === \"\" ? null :\n            (<Row>\n              <Col className=\"result-container\">\n                <h3 id=\"result\">{result}</h3>\n              </Col>\n            </Row>)\n\n          }\n\n          </Form>\n\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import { BrowserRouter } from 'react-router-dom';\n//\n// render((\n//     <BrowserRouter>\n//         <App/>\n//     </BrowserRouter>\n// ), document.getElementById('root'));\n//\n// serviceWorker.unregister();"],"sourceRoot":""}